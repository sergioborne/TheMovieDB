package com.sergioborne.themoviedb.mainlist.presenterimport android.support.annotation.VisibleForTestingimport com.sergioborne.themoviedb.Rimport com.sergioborne.themoviedb.common.OutcomeListenerimport com.sergioborne.themoviedb.common.data.ImageConfiguration.Companion.IMAGE_URL_BASEimport com.sergioborne.themoviedb.mainlist.gateway.MainListGatewayimport com.sergioborne.themoviedb.mainlist.ui.MainListViewimport com.sergioborne.themoviedb.mainlist.ui.MovieViewModelimport com.sergioborne.tmdbkotlinchallenge.data.Movieimport com.sergioborne.tmdbkotlinchallenge.data.Pageclass MainListPresenterImpl(    private val mainListView: MainListView,    private val gateway: MainListGateway) : MainListPresenter {  @VisibleForTesting  var isFetchingData = false  @VisibleForTesting  var currentPage = 1  @VisibleForTesting  var isThereMorePages = true  override fun init() {    mainListView.showLoadingIndicator()    loadFirstPage()  }  override fun refreshList() {    loadFirstPage()  }  private fun loadFirstPage() {    currentPage = 1    mainListView.clearMovieList()    loadPage(currentPage)  }  private fun loadPage(page: Int) {    gateway.loadMovies(page, object : OutcomeListener<Page> {      override fun success(page: Page) {        mainListView.hideLoadingIndicator()        mainListView.updateMoviesList(createViewModelsList(page.results))        isThereMorePages = page.total_pages > currentPage        isFetchingData = false      }      override fun error(error: Throwable) {        mainListView.showError(R.string.default_error_message)        mainListView.hideLoadingIndicator()        isFetchingData = false      }    })  }  override fun bottomListReached() {    if (isNotFetchingData() && isThereMorePages) {      isFetchingData = true      currentPage += 1      loadPage(currentPage)    }  }  private fun isNotFetchingData() = !isFetchingData  private fun createViewModelsList(movieList: List<Movie>): List<MovieViewModel> {    return movieList.map { this.createViewModelFromMovie(it) }  }  private fun createViewModelFromMovie(movie: Movie): MovieViewModel {    return MovieViewModel(        movie.id, "", movie.title, IMAGE_URL_BASE + movie.poster_path    )  }}