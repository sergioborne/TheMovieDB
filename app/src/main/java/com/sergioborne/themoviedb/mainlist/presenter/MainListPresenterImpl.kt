package com.sergioborne.themoviedb.mainlist.presenterimport com.sergioborne.themoviedb.Rimport com.sergioborne.themoviedb.common.OutcomeListenerimport com.sergioborne.themoviedb.mainlist.gateway.MainListGatewayimport com.sergioborne.themoviedb.mainlist.ui.MainListViewimport com.sergioborne.themoviedb.mainlist.ui.MovieViewModelimport com.sergioborne.tmdbkotlinchallenge.data.Movieclass MainListPresenterImpl(    private val mainListView: MainListView,    private val gateway: MainListGateway) : MainListPresenter {  override fun init() {    mainListView.showLoadingIndicator()    updateList()  }  override fun refreshList() {    updateList()  }  private fun updateList() {    gateway.loadMovies(object : OutcomeListener<List<Movie>> {      override fun success(movieList: List<Movie>) {        mainListView.hideLoadingIndicator()        mainListView.updateMoviesList(createViewModelsList(movieList))      }      override fun error(error: Throwable) {        mainListView.showError(R.string.default_error_message)        mainListView.hideLoadingIndicator()      }    })  }  private fun createViewModelsList(projectList: List<Movie>): List<MovieViewModel> {    return projectList.map { this.createViewModelFromProject(it) }  }  private fun createViewModelFromProject(movie: Movie): MovieViewModel {    return MovieViewModel(        movie.id, "", movie.title, "https://image.tmdb.org/t/p/w500" + movie.poster_path)  }  override fun itemClicked(movieId: Int, movieTitle: String) {    //mainListView.openDetails(movieId, movieTitle)  }}